import streamlit as st
import pandas as pd
import os
from datetime import datetime, date
from PIL import Image

FILENAME = "inscriptions_esadanse.csv"

COLUMNS = [
    "ID", "Nom", "Pr√©nom", "Date de naissance", "Code postal", "Ville", "Danse", "Email", "T√©l", 
    "Nom responsable l√©gal", "Pr√©nom responsable l√©gal", "Email responsable l√©gal", "T√©l responsable l√©gal", "Date d'inscription", "Mode de paiement"
]

def init_csv():
    if not os.path.exists(FILENAME):
        df = pd.DataFrame(columns=COLUMNS)
        df.to_csv(FILENAME, index=False)

def load_data():
    df = pd.read_csv(FILENAME)
    df["Date de naissance"] = pd.to_datetime(df["Date de naissance"], errors="coerce")
    df["Date d'inscription"] = pd.to_datetime(df["Date d'inscription"], errors="coerce")
    return df

def save_data(df):
    df["Date de naissance"] = pd.to_datetime(df["Date de naissance"], errors="coerce").dt.date
    df["Date d'inscription"] = pd.to_datetime(df["Date d'inscription"], errors="coerce").dt.date
    df.to_csv(FILENAME, index=False)

def generate_id(df):
    return 1 if df.empty else int(df["ID"].max()) + 1

def reindex_ids(df):
    # R√©indexe les IDs de mani√®re s√©quentielle
    df["ID"] = range(1, len(df) + 1)
    return df

init_csv()
df = load_data()

today = date.today()
min_birth_date = today.replace(year=today.year - 99)
max_birth_date = today.replace(year=today.year - 3)

logo = Image.open("logo_esadanse.jpeg")

col1, col2 = st.columns([1, 4])
with col1:
    st.image(logo, width=120)
with col2:
    st.markdown("<h1 style='margin-top: 15px;'>üìã Gestion des Inscriptions ‚Äì ESA Danse</h1>", unsafe_allow_html=True)

with st.sidebar:
    st.markdown("### üìÇ Menu")
    menu = st.radio(
        "",
        [
            "üìù Ajouter une inscription",
            "üìÑ Afficher les inscriptions",
            "‚úèÔ∏è Modifier une inscription",
            "üóëÔ∏è Supprimer une inscription"
        ],
        label_visibility="collapsed",
        index=0
    )

if "Ajouter" in menu:
    st.subheader("üìù Ajouter une nouvelle inscription")

    with st.form("form_add"):
        nom = st.text_input("Nom")
        prenom = st.text_input("Pr√©nom")
        datenaissance = st.date_input("Date de naissance", min_value=min_birth_date, max_value=max_birth_date)
        codepostal = st.text_input("Code postal")
        ville = st.text_input("Ville")
        danse = st.selectbox("Choix de danse", ["Modern'jazz enfant/ado", "Modern'jazz adulte", "Pilates", "Gym douce", "Salsa"])
        email = st.text_input("Email")
        tel = st.text_input("T√©l√©phone")
        nom_rl = st.text_input("Nom responsable l√©gal")
        prenom_rl = st.text_input("Pr√©nom responsable l√©gal")
        email_rl = st.text_input("Email responsable l√©gal")
        tel_rl = st.text_input("T√©l√©phone responsable l√©gal")
        dateinscription = st.date_input("Date d'inscription", max_value=today)
        modepaiement = st.selectbox("Mode de paiement", ["Esp√®ces", "Ch√®que", "Virement", "Carte bancaire", "Pass Sport", "Ch√®ques vacances", "Autre"])
        submitted = st.form_submit_button("Ajouter")

        if submitted:
            if nom and prenom and email:
                new_id = generate_id(df)
                new_row = pd.DataFrame([[
                    new_id, nom, prenom, datenaissance, codepostal, ville, danse, email, tel,
                    nom_rl, prenom_rl, email_rl, tel_rl, dateinscription, modepaiement
                ]], columns=COLUMNS)
                df = pd.concat([df, new_row], ignore_index=True)
                save_data(df)
                st.success("Inscription ajout√©e")
            else:
                st.warning("Veuillez remplir tous les champs obligatoires")

elif "Afficher" in menu:
    st.subheader("üìÑ Liste des inscriptions")

    danse_filter = st.multiselect("Filtrer par type de danse", options=df["Danse"].dropna().unique(), default=df["Danse"].dropna().unique())
    filtered_df = df[df["Danse"].isin(danse_filter)]

    st.dataframe(filtered_df)

    st.subheader("üìä Statistiques")
    col1, col2 = st.columns(2)
    col1.metric("üë• Total inscrits", len(filtered_df))
    col2.metric("üï∫ Cours", filtered_df["Danse"].nunique())

    st.subheader("üìà R√©partition par cours")
    st.bar_chart(filtered_df["Danse"].value_counts())

elif "Modifier" in menu:
    st.subheader("‚úèÔ∏è Modifier une inscription existante")

    if not df.empty:
        # Cr√©e une nouvelle colonne avec 'Nom' et 'Pr√©nom' concat√©n√©s
        df['Nom et Pr√©nom'] = df["Nom"] + " " + df["Pr√©nom"]
        
        # Affiche le nom et pr√©nom dans le selectbox pour choisir la personne √† modifier
        selected_person = st.selectbox("Choisir la personne √† modifier", df['Nom et Pr√©nom'])

        # R√©cup√®re la ligne correspondante √† la personne s√©lectionn√©e
        row = df[df["Nom et Pr√©nom"] == selected_person].iloc[0]

        with st.form("form_edit"):
            nom = st.text_input("Nom", value=row["Nom"])
            prenom = st.text_input("Pr√©nom", value=row["Pr√©nom"])
            datenaissance = st.date_input("Date de naissance", value=pd.to_datetime(row["Date de naissance"]), min_value=min_birth_date, max_value=max_birth_date)
            codepostal = st.text_input("Code postal", value=row["Code postal"])
            ville = st.text_input("Ville", value=row["Ville"])
            danse = st.selectbox("Danse", ["Modern'jazz enfant/ado", "Modern'jazz adulte", "Pilates", "Gym douce", "Salsa"], index=["Modern'jazz enfant/ado", "Modern'jazz adulte", "Pilates", "Gym douce", "Salsa"].index(row["Danse"]))
            email = st.text_input("Email", value=row["Email"])
            tel = st.text_input("T√©l√©phone", value=row["T√©l"])
            nom_rl = st.text_input("Nom responsable l√©gal", value=row["Nom responsable l√©gal"])
            prenom_rl = st.text_input("Pr√©nom responsable l√©gal", value=row["Pr√©nom responsable l√©gal"])
            email_rl = st.text_input("Email responsable l√©gal", value=row["Email responsable l√©gal"])
            tel_rl = st.text_input("T√©l√©phone responsable l√©gal", value=row["T√©l responsable l√©gal"])
            dateinscription = st.date_input("Date d'inscription", value=pd.to_datetime(row["Date d'inscription"]), max_value=today)
            modepaiement = st.selectbox("Mode de paiement", ["Esp√®ces", "Ch√®que", "Virement", "Carte bancaire", "Pass Sport", "Ch√®ques vacances", "Autre"])
            submitted = st.form_submit_button("Mettre √† jour")


            if submitted:
                # Met √† jour la ligne avec les nouvelles donn√©es sans la colonne 'Cours'
                df.loc[df["Nom et Pr√©nom"] == selected_person, ["Nom", "Pr√©nom", "Date de naissance", "Code postal", "Ville", "Danse", "Email", "T√©l", "Nom responsable l√©gal", "Pr√©nom responsable l√©gal", "Email responsable l√©gal", "T√©l responsable l√©gal", "Date d'inscription", "Mode de paiement"]] = [
                    nom, prenom, datenaissance, codepostal, ville, danse, email, tel, nom_rl, prenom_rl, email_rl, tel_rl, dateinscription, modepaiement
                ]
                save_data(df)
                st.success("Inscription mise √† jour avec succ√®s.")

                
elif "Supprimer" in menu:
    st.subheader("üóëÔ∏è Supprimer une inscription")

    if not df.empty:
        # Cr√©er la colonne 'Nom et Pr√©nom' si elle n'existe pas
        df['Nom et Pr√©nom'] = df["Nom"] + " " + df["Pr√©nom"]

        # S√©lectionner la personne √† supprimer
        selected_person = st.selectbox("Choisir la personne √† supprimer", df["Nom et Pr√©nom"])

        # Obtenir la ligne de la personne s√©lectionn√©e
        row = df[df["Nom et Pr√©nom"] == selected_person].iloc[0]
        selected_id = row["ID"]

        # Afficher les informations avant confirmation
        st.write("Voulez-vous vraiment supprimer cette inscription ?")
        st.write(row.drop("Nom et Pr√©nom"))  # Affiche les infos sauf la colonne concat√©n√©e

        # Bouton de confirmation
        if st.button("Confirmer la suppression"):
            # Supprimer la ligne par ID
            df = df[df["ID"] != selected_id]
            df = reindex_ids(df)
            save_data(df)
            st.success("Inscription supprim√©e.")
